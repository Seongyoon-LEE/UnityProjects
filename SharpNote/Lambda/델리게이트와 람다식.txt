✅ Lambda 식, 익명 메서드 완전 정리노트 (초등학생도 이해할 수 있는 설명 + 게임 예시 포함)

🎯 이 문서는 C#의 람다식, 익명 메서드, 델리게이트를 이용해 함수를 간단하게 표현하는 방법을 예제와 함께 설명합니다.  
Unity와 같은 게임 개발 현장에서 어떻게 쓰이는지도 함께 정리했어요!

---

# 1. 델리게이트란? 🎮

델리게이트는 "함수를 담을 수 있는 리모컨"이에요!

```csharp
delegate int Calculate(int x, int y);
```

이건 숫자 두 개를 넣고 결과를 int로 돌려주는 함수만 저장할 수 있는 리모컨이에요.

---

# 2. 람다식 기본 사용 예 ✨

```csharp
Calculate add = (x, y) => x + y;
Calculate multi = (x, y) => x * y;
Calculate divide = (x, y) => x / y;
```

🧒 쉽게 말해:
- `(x, y) => x + y` → “x랑 y 더해줘!”
- `(x, y) => x * y` → “곱해줘!”
- `(x, y) => x / y` → “나눠줘!”

➡️ `=>` 이 기호가 나오면 "람다식"이야!

---

# 3. 기존 익명 메서드 비교 (람다보다 길다)

```csharp
cal = delegate (int x, int y)
{
    return x + y;
};
```

익명 메서드도 함수에 이름 없이 넣는 방식이지만, 람다식보단 길고 복잡해요.

---

# 4. 출력 결과 예시 💡

```csharp
Console.WriteLine($"{3} + {4} : {add(3, 4)}");    // 7
Console.WriteLine($"{3} * {4} : {multi(3, 4)}");  // 12
Console.WriteLine($"{3} / {4} : {divide(3, 4)}"); // 0 (정수 나눗셈)
```

---

# 5. 문자열 이어 붙이기 예제 ✨

```csharp
Concatenate concat = (string[] str) =>
{
    string result = "";
    foreach (var s in str)
    {
        result += s + " ";
    }
    return result;
};
```

또는 Func를 써서도 가능:

```csharp
Func<string[], string> concat2 = delegate (string[] str)
{
    string result = "";
    foreach (var s in str)
    {
        result += s + " ";
    }
    return result;
};
```

📌 `Func<T1, TResult>`는 입력(T1)을 받아서 출력(TResult)을 주는 함수 델리게이트야.

---

# 6. 리턴 없는 함수 (void)도 람다로 가능

```csharp
DoSomething DoIt = () =>
{
    Console.WriteLine("무언가를 해보자");
    Console.WriteLine("한숨만 쉬지 말고");
};
DoIt();
```

👉 리턴값 없이 **그냥 실행만 하는 함수**도 이렇게 짧게 쓸 수 있어!

---

# 7. 게임 예시 🎮

## ✅ 버튼 클릭 처리
```csharp
myButton.onClick.AddListener(() => {
    SoundManager.Play("Click");
    player.Jump();
});
```

## ✅ 특정 몬스터만 찾기
```csharp
Monster boss = monsters.Find(m => m.Type == "Boss");
```

## ✅ 애니메이션이 끝나고 처리
```csharp
StartCoroutine(WaitThen(() => {
    ShowClearUI();
}));

IEnumerator WaitThen(Action callback)
{
    yield return new WaitForSeconds(1f);
    callback();
}
```

## ✅ 점수 높은 순 정렬
```csharp
scores.Sort((a, b) => b.CompareTo(a)); // 내림차순
```

---

# 8. 핵심 요약표 🧠

| 개념 | 설명 | 예시 |
|------|------|------|
| 람다식 | 이름 없이 쓰는 짧은 함수식 | (x, y) => x + y |
| delegate | 함수 리모컨 만들기 | delegate int Calc(int x, int y) |
| 익명 메서드 | 이름 없는 함수, 예전 방식 | delegate (int x, int y) {...} |
| Func | 함수 델리게이트(입력, 출력) | Func<string[], string> |
| Action | 리턴 없는 함수용 델리게이트 | Action, Action<int> 등 |
| void 람다 | 실행만 하고 결과 없는 람다 | () => { 실행내용 } |

---

# 9. 면접에서 이렇게 말하자 🎙️

> "람다식을 사용하면 UI 버튼, 리스트 필터링, 애니메이션 콜백 같은 이벤트 기반 코드를 짧고 간결하게 표현할 수 있어서 Unity 개발에서 자주 활용하고 있습니다."

---

이제 람다식이 어떤 건지, 왜 쓰는지, 어떻게 쓰는지 확실하게 이해했을 거야!  
실전에서 마구 써보면서 익숙해지는 게 제일 좋아요 💪🎮
