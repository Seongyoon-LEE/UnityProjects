✅ 람다식을 활용한 일반화 버블 정렬 기똥차게 정리노트 (초등학생도 이해 가능!)

🎯 이 코드는 숫자 배열이나 문자열 배열을 오름차순, 내림차순으로 정렬하는 프로그램이야.  
그리고 이걸 람다식만으로 완전히 처리한 깔끔한 예제야!

---

# 1. delegate 정의

```csharp
delegate int MyCalculator(int a, int b);
```

👉 이건 이전 코드에 있던 델리게이트야. 이번 코드에서는 쓰진 않지만, 함수 구조를 흉내내기 위해 만든 거야!

---

# 2. 형식 제약 있는 메서드 (참고용)

```csharp
static int Asend<T>(T a, T b) where T : IComparable<T>
{
    return a.CompareTo(b);
}
```

```csharp
static int Desend<T>(T a, T b) where T : IComparable<T>
{
    return a.CompareTo(b) * -1;
}
```

👉 이 두 메서드는 비교 기준을 직접 함수로 만든 거야.  
하지만 본론은 이걸 람다식으로 직접 대체하는 거야! 💪

---

# 3. 핵심 함수: 버블 정렬

```csharp
static void BubbleSort<T>(T[] DataSet, Func<T, T, int> compare)
```

🧠 설명:
- `T[] DataSet`: 정렬할 배열
- `Func<T, T, int> compare`: 두 값을 비교해서 누가 앞에 와야 하는지를 알려주는 **람다식 함수**

```csharp
if (compare(DataSet[j], DataSet[j + 1]) > 0)
```

👉 이 조건이 `true`면 두 값을 바꿔서 자리 교환해!

---

# 4. Main 함수 설명 ✨

### ✅ 정수 배열 오름차순 정렬
```csharp
BubbleSort<int>(intArray, (a, b) => a.CompareTo(b));
```
- `3,2,5,4,1` → `1,2,3,4,5`

### ✅ 정수 배열 내림차순 정렬
```csharp
BubbleSort<int>(intArray, (a, b) => b.CompareTo(a));
```
- `1,2,3,4,5` → `5,4,3,2,1`

---

### ✅ 문자열 배열 오름차순 정렬
```csharp
BubbleSort(stringArray, (a, b) => a.CompareTo(b));
```
- `"Apple"`, `"Banana"`, `"Cherry"`, `"Orange"` 순서로!

### ✅ 문자열 배열 내림차순 정렬
```csharp
BubbleSort(stringArray, (a, b) => b.CompareTo(a));
```
- `"Orange"`, `"Cherry"`, `"Banana"`, `"Apple"` 순서로!

---

# 5. 람다식이 중요한 이유 🔥

| 구분 | 장점 |
|------|------|
| 코드 간결 | 함수 따로 안 만들고 한 줄로 바로 비교 기준 전달 |
| 재사용성 좋음 | 어떤 타입이든(T) 정렬 가능 |
| Unity에서 활용도 높음 | 리스트 정렬, 오브젝트 필터링에 자주 쓰임 |

---

# 6. 면접에서 이렇게 말하자 🎙️

> "버블 정렬은 일반적으로 int에만 쓰이지만, 람다식을 사용해 Func<T, T, int>로 비교 기준을 외부에서 넘겨줌으로써 int, string 등 어떤 타입이든 정렬할 수 있게 일반화했습니다."

---

✅ 이 코드는 일반화 + 람다식 + 버블 정렬의 완벽한 조합!
Unity에서도 몬스터 이름, 점수, 속도 정렬 등에 그대로 응용할 수 있어요 🔥
