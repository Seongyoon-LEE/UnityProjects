📘 C# 버블 정렬 + 이진 탐색 알고리즘 완전 정복! 🧠

이번엔 정렬 알고리즘 중 가장 기초적인 "버블 정렬"과
정렬된 데이터를 빠르게 찾는 "이진 탐색 알고리즘"을 함께 정리할게!

---

✅ 버블 정렬(Bubble Sort) 알고리즘이란?

배열의 요소를 "옆에 있는 값"과 비교해서
큰 값을 오른쪽으로 하나씩 밀어내는 방식이야. (마치 물속에서 거품이 위로 올라오듯!)

```csharp
public static void BubbleSort(int[] arr)
{
    int n = arr.Length;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - 1 - i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                // 두 값을 서로 교환 (Swap)
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
```

📌 핵심 정리:
- 두 숫자를 비교해서 순서가 잘못되면 바꿔줘
- 한 바퀴 돌면 가장 큰 수가 맨 뒤로 감
- 이런 식으로 여러 번 반복해서 전체를 정렬함

---

✅ 이진 탐색(Binary Search) 알고리즘

정렬된 배열에서만 사용할 수 있는 **아주 빠른 탐색 방법**이야!  
항상 **중간값**을 기준으로 좁혀가면서 찾기 때문에 빠름!

```csharp
public static int BSearch(int[] ar, int len, int target)
{
    int first = 0;
    int last = len - 1;
    int mid;

    while (first <= last)
    {
        mid = first + (last - first) / 2;

        if (target == ar[mid])
            return mid;
        else if (target < ar[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
```

---

✅ 전체 코드 사용 예시

```csharp
int[] arr = { 160, 8, 11, 15, 20, 22, 66, 88, 123, 159 };
BubbleSort(arr); // 먼저 정렬부터!
int idx = BSearch(arr, arr.Length, 123); // 123이 어디 있는지 탐색

if (idx == -1)
    Console.WriteLine("탐색 실패");
else
    Console.WriteLine($"타겟 저장 인덱스: {idx}");
```

---

✅ 출력 예시 (정렬 후 탐색 성공 시)

```
타겟 저장 인덱스: 8
타겟 저장 인덱스: 2
```

---

🎮 게임 예시: 몬스터 HP 정렬 후 검색

```csharp
int[] monsterHPs = { 250, 120, 90, 300, 180 };
BubbleSort(monsterHPs); // 체력순 정렬
int bossHP = 300;
int idx = BSearch(monsterHPs, monsterHPs.Length, bossHP);
Console.WriteLine($"보스 몬스터 위치: {idx}");
```

---

✅ 정리 요약

| 알고리즘 | 설명 |
|----------|------|
| 버블 정렬 | 옆에 있는 값과 비교해 큰 수를 뒤로 보내며 정렬 |
| 이진 탐색 | 정렬된 배열에서 중간부터 찾아가는 빠른 탐색 방법 |

---

💡 한 줄 요약:  
"정렬 먼저 하고 → 이진 탐색으로 빠르게 찾자!" 🏃‍♂️💨

이 알고리즘들은 게임에서도  
- 몬스터 HP 정렬  
- 아이템 가격 탐색  
- 순위 계산  
같은 데 많이 쓰인단다! 😎