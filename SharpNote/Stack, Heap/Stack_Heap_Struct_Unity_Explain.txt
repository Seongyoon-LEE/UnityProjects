
==============================
🧠 스택, 힙, 복합 구조 데이터 쉽게 이해하기 (게임 예시 포함)
==============================

이 문서는 C#과 Unity 게임 개발에서 자주 나오는 "스택", "힙", 그리고 "복합 구조 데이터"에 대해 초등학생도 이해할 수 있도록 아주 쉽게 설명한 정리본이에요 😊

------------------------------
🔹 1. 스택 (Stack)이란?
------------------------------
✔️ 개념:
- 스택은 책 쌓듯이 **차곡차곡 위에 쌓았다가, 위에서부터 꺼내는 구조**에요.
- 나중에 넣은 게 먼저 나가요! (Last In, First Out = LIFO)

✔️ C# 예시:
```csharp
Stack<string> stack = new Stack<string>();
stack.Push("점프");
stack.Push("공격");
stack.Push("피격");
Console.WriteLine(stack.Pop()); // 피격
```

✔️ 게임 예시:
- 캐릭터 상태가 "점프 → 공격 → 피격" 순서로 쌓였으면, 피격 상태부터 처리되고 다시 원래 상태로 돌아감.

------------------------------
🔹 2. 힙 (Heap)이란?
------------------------------
✔️ 개념:
- 힙은 **메모리 공간**이에요. 큰 상자처럼 여러 개의 데이터를 저장해두는 공간.
- 여유 공간이 많고 자유롭게 꺼내쓸 수 있어요.
- 우리가 만든 대부분의 "new로 만든 객체"는 힙에 저장돼요!

✔️ C# 예시:
```csharp
class Monster
{
    public int hp;
}

Monster slime = new Monster(); // 이 slime 객체는 힙에 저장돼요!
slime.hp = 100;
```

✔️ 게임 예시:
- 몬스터 하나하나 (슬라임, 고블린 등)를 만들 때마다 힙 공간에 저장해서 관리해요.
- 슬라임 100마리를 만들면 100개의 힙 공간을 쓰는 거예요.

------------------------------
🔹 3. 스택 vs 힙
------------------------------
| 항목 | 스택 | 힙 |
|------|------|-----|
| 저장 위치 | 메서드 안의 임시 변수 | new로 만든 객체 |
| 속도 | 빠름 | 조금 느림 |
| 메모리 자동 제거 | 자동 | 자동 (GC에 의해 나중에 정리됨) |
| 예시 | int i = 3; | new Monster(); |

✔️ 게임에서의 구분:
- `int`, `float` 같은 간단한 숫자는 스택.
- 몬스터, 아이템, 게임 오브젝트 등은 힙.

------------------------------
🔹 4. 복합 구조 데이터란?
------------------------------
✔️ 개념:
- 여러 개의 데이터를 **묶어서 하나처럼 만든 구조**예요.
- C#에서는 class, struct, List, Dictionary, 배열 등이 있어요!

✔️ 예시:
```csharp
struct Player
{
    public string name;
    public int level;
}
```

✔️ 게임 예시:
- 플레이어 한 명의 정보 (이름, 레벨, 체력 등)를 하나로 묶어서 관리하면 편해요.
- 몬스터, 아이템, 퀘스트도 모두 복합 구조로 만듦.

------------------------------
🔸 정리 요약표
------------------------------
| 항목 | 쉽게 말하면? | 게임에서 예시 |
|------|----------------|----------------|
| 스택 | 종이 쌓기 | 상태 복귀, Undo |
| 힙 | 큰 창고 | 몬스터, 아이템 객체 |
| 복합 구조 | 여러 속성을 묶음 | 캐릭터 정보, 몬스터 구조체 |

------------------------------
🎮 Unity 게임 활용 예시 모음
------------------------------

✔️ 상태 스택 (피격 후 복귀)
```csharp
Stack<string> stateStack = new Stack<string>();
stateStack.Push("Idle");
stateStack.Push("Attack");
stateStack.Push("Damaged");

string current = stateStack.Pop(); // Damaged 처리 후 → Attack 복귀
```

✔️ 힙 객체 (몬스터 생성)
```csharp
class Monster
{
    public int hp = 100;
}

Monster goblin = new Monster(); // 힙에 저장됨
```

✔️ 복합 구조 (플레이어 정보)
```csharp
class PlayerData
{
    public string name;
    public int level;
    public float hp;
}

PlayerData player = new PlayerData() { name = "Kkaebin", level = 10, hp = 100f };
```

------------------------------
📌 마무리
------------------------------
- 스택은 임시 저장, 힙은 큰 객체 저장소.
- 복합 구조는 관련된 데이터 묶음.
- Unity 게임 개발에서는 이 개념들을 적절히 조합해서 **강력한 게임 시스템**을 만들 수 있어요!

이해가 잘 됐기를 바라요 😊 게임을 만들며 조금씩 더 익혀보자!
