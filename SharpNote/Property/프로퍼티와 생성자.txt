📘 프로퍼티 + 생성자 + 객체 초기화 구문 완전정복!

이번엔 C#에서 프로퍼티와 생성자를 이용해서 객체를 유용하게 초기화하는 방법을 배워볼게!  
객체 만들자마자 값을 세팅하는 아주 깔끔한 코드 작성법이야 😎

---

✅ 1. 기본 개념 정리

```csharp
public class BirthdayInfo
{
    public string Name { get; set; } // 자동 구현 프로퍼티
    public DateTime Birthday { get; set; } // 생일 정보

    public BirthdayInfo()
    {
        Console.WriteLine("생성자 호출!");
    }

    public int Age
    {
        get
        {
            return new DateTime(DateTime.Now.Subtract(Birthday).Ticks).Year;
        }
    }
}
```

- `Name`, `Birthday`: 자동 구현 프로퍼티로 선언
- `Age`: 생일을 기준으로 현재 나이를 계산해주는 읽기 전용 프로퍼티
- `BirthdayInfo()` 생성자: 객체가 생성될 때 자동 호출되어 메시지를 출력함

---

✅ 2. 객체 초기화 구문 사용

```csharp
BirthdayInfo birth = new BirthdayInfo()
{
    Name = "카리나",
    Birthday = new DateTime(1998, 10, 30)
};
```

📌 위 구문에서 일어나는 일
- `new BirthdayInfo()`로 객체를 생성 → 생성자 호출됨
- 중괄호 `{}` 안에서 프로퍼티 값을 초기화함

이걸 "**객체 초기화 구문** (Object Initializer)"라고 불러.

---

✅ 3. 전체 실행 코드

```csharp
static void Main(string[] args)
{
    BirthdayInfo birth = new BirthdayInfo()
    {
        Name = "카리나",
        Birthday = new DateTime(1998, 10, 30)
    };

    Console.WriteLine($"Name: {birth.Name}");
    Console.WriteLine($"birthday: {birth.Birthday.ToShortDateString()}");
    Console.WriteLine($"age: {birth.Age}");
}
```

📌 실행 결과 예시:
```
생성자 호출!
Name: 카리나
birthday: 1998-10-30
age: 25
```

---

✅ 4. 게임에서는 어떻게 쓸까?

🎮 예: 캐릭터 생성 시 기본값 설정

```csharp
PlayerInfo player = new PlayerInfo()
{
    Name = "용사 깨빈",
    Level = 1,
    BirthDay = new DateTime(2005, 4, 20)
};
```

✔ 캐릭터 생성 메뉴에서 유저가 입력한 값을 한 줄로 정리해서 초기화할 수 있어!  
✔ 생성자 + 프로퍼티 조합은 게임 개발에서도 정말 자주 써!

---

✅ 정리!

- 생성자는 객체가 만들어질 때 자동으로 실행되는 함수야.
- 프로퍼티는 정보를 담고 꺼내는 문 역할을 해.
- 객체 초기화 구문을 사용하면 코드를 짧고 예쁘게 쓸 수 있어!
- 게임 캐릭터, 아이템, NPC 등 초기값이 필요한 클래스에 아주 유용해!

---

🎉 이제 너도 객체를 똑똑하게 초기화할 수 있어!  
코드가 깔끔해지고 실수도 줄어들 거야! 😊