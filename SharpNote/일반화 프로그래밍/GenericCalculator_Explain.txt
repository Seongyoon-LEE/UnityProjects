✅ 일반화(제네릭) 프로그래밍 + 델리게이트 정리

---

# 1. 일반화(제네릭)이란?

👉 똑같은 기능을 여러 타입(int, double 등)에서 코드 한 번만 쓰고 재사용하는 방법!

예시:

```csharp
public class Calculator<T> where T : INumber<T>
{
    public T Plus(T a, T b) => a + b;
    public T Minus(T a, T b) => a - b;
}
```

### ✅ T: 타입의 자리 표시자

- int, double 등 다양한 숫자 타입으로 바뀔 수 있음

### ✅ where T : INumber

- 숫자 타입만 받게 제한하는 조건 (C# 11 / .NET 7 이상 지원)

---

# 2. 초등학생 비유 🍎

"사과 상자"든 "귤 상자"든 같은 상자를 써서 과일을 꺼낼 수 있어요.

- 상자 = Calculator
- 과일 = 타입(int, double 등)
- 조건(where T : INumber) = 과일만 OK! 돌멩이는 안 돼요 ❌

---

# 3. 게임 예시 🎮

### 마법 공격 데미지 계산기:

```csharp
Calculator<int> intCalc = new Calculator<int>();
int damage = intCalc.Minus(100, 20); // 일반 몬스터용

Calculator<double> doubleCalc = new Calculator<double>();
double bossDamage = doubleCalc.Minus(150.5, 30.2); // 보스 몬스터용
```

- 하나의 클래스(Calculator)로 두 상황 다 처리 가능!

---

# 4. 델리게이트와 일반화

델리게이트: 함수를 전달할 수 있는 리모컨 같은 존재

```csharp
delegate int MyCalculator(int a, int b);
```

✅ 일반화된 델리게이트:

```csharp
delegate T MyCalculator<T>(T a, T b) where T : INumber<T>;
```

- 타입에 따라 델리게이트도 자유롭게!

---

# 5. 핵심 요약 정리표

| 개념                | 설명              | 예시                                      |
| ----------------- | --------------- | --------------------------------------- |
| T                 | 타입의 자리          | Calculator                              |
| where T : INumber | 숫자만 가능하게 제한     | int, double 등                           |
| 델리게이트             | 함수를 전달하는 리모컨    | delegate int MyCalculator(int a, int b) |
| 일반화 델리게이트         | 타입을 자유롭게 쓰는 리모컨 | delegate T MyCalculator(T a, T b)       |

---

# 6. 실전 예시 ✨

```csharp
Calculator<int> calc = new Calculator<int>();
Console.WriteLine("100 - 30 = " + calc.Minus(100, 30));

Calculator<double> bossCalc = new Calculator<double>();
Console.WriteLine("150.5 - 50.2 = " + bossCalc.Minus(150.5, 50.2));
```

---

🧠 기억해! `T`는 타입의 빈칸, `where T : INumber<T>`는 숫자만 OK! 델리게이트랑 합치면 함수도 유연하게 전달 가능해져요 😎
