
[유니티 회전(Quaternion) 관련 설명]

1. Quaternion.LookRotation 과 Quaternion.Euler 의 차이

- Quaternion.LookRotation(Vector3 방향)
  → 이건 "이 방향을 바라보게" 회전을 만드는 거예요.
  → 예: Vector3(h, 0, v)를 넣으면, 캐릭터가 (h, v) 방향을 바라보게 회전함.
  → 주로 "어디를 향해서 회전시킬까?" 라는 상황에서 사용해요.
  → 3D 게임에서 이동 방향을 보고 싶을 때 자주 써요.

- Quaternion.Euler(x, y, z)
  → 이건 "직접 회전 각도를 지정"해서 회전을 만드는 거예요.
  → x, y, z는 각각 x축, y축, z축으로 몇 도 회전할지를 말해요.
  → 예: (0, 90, 0)은 y축으로 90도 회전 (왼쪽에서 오른쪽 보기)
  → 주로 "특정 각도로 회전시키고 싶다!" 할 때 사용해요.

🎯 정리!
- LookRotation: 어떤 '방향'을 바라보게 하고 싶을 때
- Euler: 직접 '각도'를 지정하고 싶을 때

--------------------------------------

2. 비슷한 개념들 추가 정리

- transform.rotation = Quaternion.identity;
  → 회전이 없는 상태(0도 회전)로 만든다!
  → 초기화할 때 자주 써요.

- transform.forward / transform.right / transform.up
  → 오브젝트가 현재 어느 방향을 향하고 있는지를 알려줘요.
    * forward: 앞
    * right: 오른쪽
    * up: 위쪽

- Quaternion.Lerp(a, b, t)
  → 회전 a에서 b로 부드럽게 회전시켜요 (보간)
  → t는 0~1 사이의 값으로, 회전의 비율을 의미해요.
  → 부드러운 회전 애니메이션에 자주 사용돼요.

- transform.LookAt(target);
  → 내 캐릭터가 특정 대상(target)을 바라보게 해줘요.
  → LookRotation이랑 비슷하지만, 직접 타겟을 지정할 수 있어요.

--------------------------------------

🍯 꿀팁으로 기억하기!

- LookRotation = "이 방향 봐!" (방향 기반)
- Euler = "이 각도로 돌려!" (숫자 각도 기반)
- identity = "회전 초기화"
- LookAt = "저 친구 바라봐!"

이런 회전 관련 개념은 3D 게임 만들 때 자주 쓰이니까 꼭 익혀두자! 😊
