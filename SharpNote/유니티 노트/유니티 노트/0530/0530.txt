무기 발사 방식
Projecttile Movement: 
실제 총알(혹은 투사체) 오브젝트를 생성해서 움직이는 방식
장점: 
1.물리 기반 움직임 구현이 쉬움: Rigidbody + Collider로 자연스러운 궤적 가능
2.시각적 효과에 강함: 총알이 날아가는 궤적을 직접 볼 수 있어 몰입감 상승
3.충돌 처리 간편: OnTriggerEnter, OnCollisionEnter 등을 사용해 충돌 처리 가능
단점:
1.성능 부담: 많은 수의 총알을 생성하면 오브젝트 수 증가 → 최적화 문제
2.빠른 총알 처리 부정확 가능성: 총알 속도가 너무 빠르면 충돌 전에 지나쳐버릴 수 있음 (tunneling 현상)
3.중력 등 외부 요인 영향을 받음: Bullet Drop(낙차) 같은 처리가 필요한 경우 있음

RayCast 방식: 총구에서 광선을 쏴 맞은 대상만 감지하는 방식 (즉시 판정)
장점:
1.즉각적인 타격감: 총알이 날아가는 시간 없이 바로 명중 처리 가능
2.성능 우수: 실제 오브젝트를 생성하지 않기 때문에 경량화에 적합
3.빠른 총알 표현에 적합: 스나이퍼 총 등 속도가 매우 빠른 무기에 최적화

단점:
1.물리효과 없음: Rigidbody가 없기 때문에 충돌 후 반응(튕김, 밀림 등)은 따로 구현 필요
2.시각적 효과 부족: 총알이 날아가는 모습이 없기 때문에 연출적으로 약할 수 있음
3.지형이나 장애물 뚫는 처리 주의: Ray가 투과하는 구조라면, 정확한 Layer Mask 설정이 필요함

정리:
방식	장점					단점
Projectile	자연스러운 움직임, 충돌 처리 쉬움, 시각 효과	성능 부담, 빠른 총알 오차, 물리 영향
Raycast	즉시 판정, 성능 좋음, 빠른 총알 적합		물리 없음, 효과 부족, 장애물 처리 주의

Navigation Statc: Npc가 다닐 지역을 구울때는
OffMeshLink: 높은데서 떨어질때

버그픽스
1.플레이어가 몸에 세게 부딫히면 너무 많이 밀려난다
해결방법:스크립트로 태그와 콜라이더를 충돌 했을때 isKanematic을 활성화
비활성화를 해서 물리를 껐다 켰다 하여 물리 작용을 코드로 관리한다

2.몹과 플레이어의 거리에 의해서만 공격 하게 하니깐
뒤돌아 있는 플레이어를 정확하게 attack 하지 않는다.
해결방법: 타겟과 자기자신의 위치를 빼서 정규화를 하고 방향을 구한 다음에 
Quaternion.LookRotation(방향) 으로 자기 자신이 바라보게 회전하는 rot을 만들고
Quaternion.Slerp에 넣어서 곡면 보간 함수를 이용해 부드럽게 회전했다

3.OffMeshLink 했을때 점프하는 애니메이션 구현
-낙하 오브젝트에 Generate OffMeshLinks를 체크 하고 Bake에서 Off Mesh Links를 설정
하고 낙하 오브젝트에 태그를 설정하여 태그를 감지 하였을때 낙하 애니메이션이 나오게 
하면 된다.
 AnimatorClipInfo[] clipInfos = anim.GetCurrentAnimatorClipInfo(0); // 기본 인덱스 레이어 
 yield return new WaitForSeconds(clipInfos.Length); // 1초 대기
를 이용하여 