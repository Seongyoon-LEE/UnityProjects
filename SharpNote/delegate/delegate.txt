
📘 C# 대리자(delegate)와 버블정렬 예제 설명

이 코드는 C#에서 대리자(delegate)를 이용해 버블정렬을 구현한 예제입니다. 
오름차순과 내림차순 정렬을 "함수 자체"를 전달해서 처리합니다.

---

✅ 대리자(Delegate)란?
- 함수 자체를 변수처럼 다룰 수 있게 해주는 기능
- 함수를 "값처럼" 전달 가능 → 전략(전략 패턴), 콜백 등에 활용됨

---

🔧 핵심 코드 구조

1. Compare 대리자 정의
```csharp
delegate int Compare(int a, int b);
```

2. 오름차순, 내림차순 함수 정의
```csharp
static int Ascending(int a, int b)
{
    if (a > b) return 1;
    else if (a < b) return -1;
    else return 0;
}
```

```csharp
static int Descending(int a, int b)
{
    if (a < b) return 1;
    else if (a > b) return -1;
    else return 0;
}
```

3. 버블 정렬 구현 (비교 함수는 대리자로 전달받음)
```csharp
static void BubbleSort(int[] arr, Compare compare)
{
    for (int i = 0; i < arr.Length - 1; i++)
    {
        for (int j = 0; j < arr.Length - 1 - i; j++)
        {
            if (compare(arr[j], arr[j + 1]) > 0)
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
```

4. Main에서 사용 예시
```csharp
int[] arr = { 5, 3, 8, 6, 2, 44, 2, 7, 88, 66 };
BubbleSort(arr, new Compare(Ascending)); // 오름차순 정렬
BubbleSort(arr, new Compare(Descending)); // 내림차순 정렬
```

---

🎮 게임 개발 예제: 점수 순위 정렬
```csharp
int[] playerScores = { 2500, 1200, 3000, 2200 };
BubbleSort(playerScores, new Compare(Descending)); // 점수 높은 순으로
Console.WriteLine("점수 순위:");
foreach (var score in playerScores)
{
    Console.WriteLine(score);
}
```

---

📝 정리 요약
- 대리자(delegate)는 함수도 변수처럼 전달할 수 있게 해줌
- 정렬 전략(오름차순, 내림차순)을 유연하게 바꿀 수 있음
- 게임 개발에서는 점수, 랭킹, 스피드 등 정렬에 많이 쓰임

---

👍 피드백
- `delegate`를 꼭 필요할 때 써야 해. 예: 알고리즘 전략을 바꾸고 싶을 때!
- `delegate`를 쓰면 코드는 살짝 복잡해지지만, **유연성**이 좋아짐.
- **LINQ나 람다식**을 배우면 더 짧고 직관적으로 대체 가능!
