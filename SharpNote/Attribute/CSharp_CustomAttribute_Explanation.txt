
📚 C# 사용자 정의 어트리뷰트(User Defined Attribute) 예제 완전 정복!
===============================================================

이번 코드는 C#에서 "사용자가 직접 만든 어트리뷰트(Attribute)"를 활용하는 예제예요.
어트리뷰트는 **'부가 설명 정보'** 를 코드에 붙이는 도구로, 컴퓨터가 메타데이터로 읽고 해석할 수 있도록 도와줘요.

자, 하나씩 아주 쉽게 뜯어볼게요! 🧩

--------------------------------------------------
👑 1. 어트리뷰트(Attribute)는 뭐 하는 애야?
--------------------------------------------------
- 어트리뷰트는 클래스, 메서드 등에 "설명 딱지"를 붙여주는 도구예요.
- 예를 들어, "이 클래스는 누가 만들었고, 언제 수정했는지" 같은 정보를 담을 수 있어요.
- 실행할 때 이 정보를 읽어서 디버깅, 로그, 문서화 등에 활용할 수 있죠.

--------------------------------------------------
🏗️ 2. 직접 만든 어트리뷰트: History 클래스
--------------------------------------------------
```csharp
[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
class History : System.Attribute
```
이건 사용자 정의 어트리뷰트 `History`를 만든 거예요.
- `AttributeTargets.Class` : 클래스에만 붙일 수 있어요.
- `AllowMultiple = true` : 여러 번 붙일 수 있게 허용했어요.

🧱 History 어트리뷰트 속성
- `Programmer` : 만든 사람 이름
- `Version` : 버전 번호
- `Changes` : 어떤 변경을 했는지

생성자에는 `programmer`만 필수로 받고, 나머지는 나중에 붙일 수 있어요.

--------------------------------------------------
🏷️ 3. 어트리뷰트 붙이기 - MyClass 위에!
--------------------------------------------------
```csharp
[History("Kang", Version = 1.0, Changes = "2024-11-01 Created Class")]
[History("Sung", Version = 1.1, Changes = "2024-12-03 Add Class")]
class MyClass
```
이건 MyClass에 "이 클래스는 강이 만들었고, 성이 업데이트했다"는 설명을 붙인 거예요.

이 어트리뷰트는 진짜 실행되는 코드는 아니지만, 컴퓨터가 읽을 수 있는 **설명서**처럼 기능해요.

--------------------------------------------------
🔍 4. 리플렉션(Reflection)으로 정보 꺼내기
--------------------------------------------------
```csharp
Type type = typeof(MyClass);
Attribute[] attributes = Attribute.GetCustomAttributes(type);
```
- `typeof(MyClass)` : MyClass 타입 정보를 가져와요.
- `GetCustomAttributes` : 붙어있는 어트리뷰트들을 싹 꺼내요.

그리고 foreach문에서 하나씩 꺼내서 `as History`로 형변환해서
어떤 사람이 언제 어떤 변경을 했는지 출력해요.

💬 출력 예시:
```
MyClass changes history.....
Ver : 1.0 Programmer : Kang Changes : 2024-11-01 Created Class
Ver : 1.1 Programmer : Sung Changes : 2024-12-03 Add Class
```

--------------------------------------------------
🎮 5. 게임에서 어떻게 쓰일까?
--------------------------------------------------
이런 사용자 정의 어트리뷰트는 게임 개발에서도 여러 가지로 쓸 수 있어요!

🧩 예시 1: 스킬 시스템
```csharp
[Skill("Fireball", Damage = 30, Cooldown = 5)]
class FireballSkill {...}
```

🧩 예시 2: 게임 오브젝트 설정
```csharp
[Entity("NPC", Tag = "QuestGiver")]
class Villager {...}
```

🧩 예시 3: 디버깅/기록용
```csharp
[History("Sung", Version = 1.5, Changes = "AI 개선")]
```

이런 방식으로 어트리뷰트를 활용하면 코드와 함께 **설명 데이터**도 같이 관리할 수 있어서 유지보수가 쉬워져요.

--------------------------------------------------
✅ 요약 정리
--------------------------------------------------
✔ 어트리뷰트는 코드에 설명을 붙여주는 도구!
✔ 직접 어트리뷰트를 만들어서, 클래스에 버전/수정 정보를 기록할 수 있어요.
✔ `Attribute.GetCustomAttributes`로 실행 중에 어트리뷰트 정보를 읽을 수 있어요.
✔ 게임에서는 스킬, 오브젝트, 로그 등 다양한 설정과 설명에 활용 가능해요!

어트리뷰트는 보조적인 기능이지만, **잘 쓰면 게임 개발 생산성과 유지보수 효율이 확 올라가요!** 🚀
