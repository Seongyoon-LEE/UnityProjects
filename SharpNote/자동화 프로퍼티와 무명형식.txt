📘 C# 시험 문제 정리 - 자동 구현 프로퍼티 & 무명 형식

✅ [1번 문제] 클래스 + 자동 구현 프로퍼티

```csharp
class NameCard
{
    public int Age { get; set; } = 24;
    public string Name { get; set; } = "상현";

    internal class MainApp7
    {
        static void Main(string[] args)
        {
            NameCard MyCard = new NameCard();
            Console.WriteLine($"나이 : {MyCard.Age}");
            Console.WriteLine($"이름 : {MyCard.Name}");
        }
    }
}
```

🧠 개념 요약:
- 자동 구현 프로퍼티 사용 → 필드 없이 바로 프로퍼티 정의 가능
- `= 24`, `= "상현"` 처럼 기본값 설정 가능
- 객체 생성 시 자동으로 초기값이 세팅됨

🖥️ 출력 결과:
```
나이 : 24
이름 : 상현
```

🎮 게임 활용 예:
캐릭터 초기 상태 설정
```csharp
public class CharacterInfo
{
    public int Level { get; set; } = 1;
    public string Nickname { get; set; } = "초보자";
}
```

---

✅ [2번 문제] 무명 형식 (Anonymous Type)

```csharp
static void Main(string[] args)
{
    var nameCard = new { name = "박상현", age = 17 };
    Console.WriteLine($"이름:{nameCard.name} 나이:{nameCard.age}");

    var complex = new { Real = 3, Imagnary = -12 };
    Console.WriteLine($"Real:{complex.Real}나이:{complex.Imagnary}");
}
```

🧠 개념 요약:
- 무명 형식은 클래스 없이 값과 프로퍼티만으로 임시 객체 생성
- `var`를 사용해야 하고 한 번만 쓰는 용도로 적합
- 디버깅, 간단한 데이터 묶음 출력 등에 사용

🖥️ 출력 결과:
```
이름:박상현 나이:17
Real:3나이:-12
```

🎮 게임 활용 예:
```csharp
var enemy = new { Name = "고블린", HP = 100 };
Console.WriteLine($"이름: {enemy.Name}, 체력: {enemy.HP}");
```

---

✅ 총정리

| 문제 | 개념 | 설명 |
|------|------|------|
| 1번 | 자동 구현 프로퍼티 | 기본값 설정 가능, 객체 생성 시 자동 초기화 |
| 2번 | 무명 형식 | 클래스 없이 임시 객체 생성, 디버깅/테스트용에 적합 |

📌 두 개념 모두 게임 개발 시 캐릭터 정보, 임시 데이터 생성, 디버깅에 자주 활용됨!