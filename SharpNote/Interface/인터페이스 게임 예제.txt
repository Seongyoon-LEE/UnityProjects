
🎮 Unity와 연동한 인터페이스 활용 예제 - 게임 로그 시스템

────────────────────────────────────────────
✅ 개요: Unity에서 ILogger / IFormattableLogger 활용하기
────────────────────────────────────────────

이 예제는 Unity 게임 내에서 사용할 수 있는 간단한 **로그 인터페이스 시스템**입니다.

- 로그 인터페이스를 통해 콘솔 로그 외에도 파일 저장, UI 출력 등 다양한 방식으로 로그를 기록 가능
- 예: 전투 중 데미지 출력, NPC 대화 로그, 퀘스트 진행 등

────────────────────────────────────────────
✅ Unity 인터페이스 정의 (Scripts/ILogger.cs)
────────────────────────────────────────────

```csharp
public interface ILogger
{
    void WriteLog(string message);
}

public interface IFormattableLogger : ILogger
{
    void WriteLog(string format, params object[] args);
}
```

────────────────────────────────────────────
✅ Unity용 ConsoleLogger 구현 (Scripts/ConsoleLogger.cs)
────────────────────────────────────────────

```csharp
using UnityEngine;

public class ConsoleLogger : IFormattableLogger
{
    public void WriteLog(string message)
    {
        Debug.Log($"{System.DateTime.Now.ToLocalTime()} {message}");
    }

    public void WriteLog(string format, params object[] args)
    {
        string message = string.Format(format, args);
        Debug.Log($"{System.DateTime.Now.ToLocalTime()} {message}");
    }
}
```

────────────────────────────────────────────
✅ 게임 매니저에서 로그 사용 예시 (Scripts/GameManager.cs)
────────────────────────────────────────────

```csharp
using UnityEngine;

public class GameManager : MonoBehaviour
{
    private IFormattableLogger logger;

    void Start()
    {
        logger = new ConsoleLogger();

        logger.WriteLog("게임이 시작되었습니다.");
        logger.WriteLog("{0}이(가) {1}에게 {2}의 피해를 입혔습니다!", "Player", "Goblin", 15);
    }
}
```

────────────────────────────────────────────
✅ 출력 예시 (Unity 콘솔)
────────────────────────────────────────────
2025-06-02 오전 10:15:01 게임이 시작되었습니다.
2025-06-02 오전 10:15:01 Player이(가) Goblin에게 15의 피해를 입혔습니다!

────────────────────────────────────────────
✅ 확장 예시 (UI 텍스트 로그로 출력)
────────────────────────────────────────────

```csharp
using UnityEngine;
using UnityEngine.UI;

public class UILogger : IFormattableLogger
{
    public Text logText;

    public UILogger(Text textUI)
    {
        logText = textUI;
    }

    public void WriteLog(string message)
    {
        logText.text += $"{System.DateTime.Now.ToShortTimeString()} {message}\n";
    }

    public void WriteLog(string format, params object[] args)
    {
        string message = string.Format(format, args);
        WriteLog(message);
    }
}
```

> UI에 로그를 출력할 수 있는 클래스. 대화, 튜토리얼, 시스템 메시지 등에 활용 가능!

────────────────────────────────────────────
✅ 유닛 테스트 예시 (PlayMode or EditMode)
────────────────────────────────────────────

```csharp
using NUnit.Framework;

public class LoggerTests
{
    class MockLogger : IFormattableLogger
    {
        public string LastMessage { get; private set; }

        public void WriteLog(string message)
        {
            LastMessage = message;
        }

        public void WriteLog(string format, params object[] args)
        {
            WriteLog(string.Format(format, args));
        }
    }

    [Test]
    public void Logger_FormatsMessageCorrectly()
    {
        var logger = new MockLogger();
        logger.WriteLog("{0} HP 감소", 20);
        Assert.AreEqual("20 HP 감소", logger.LastMessage);
    }
}
```

────────────────────────────────────────────
✅ 정리
────────────────────────────────────────────

- Unity에서도 인터페이스를 사용해 유연한 로그 시스템을 구성할 수 있음
- 콘솔, UI, 파일 등 다양한 출력 방식 추가 가능
- 테스트용 MockLogger로 단위 테스트 가능 → 게임의 품질 향상

이 구조는 로그뿐 아니라, IDamageable, IInteractable 등 다양한 게임 시스템에 활용할 수 있습니다. 🚀
