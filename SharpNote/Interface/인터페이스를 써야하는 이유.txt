
🎮 C# 인터페이스 예제 - 게임 개발에서의 활용

────────────────────────────────────────────
✅ 인터페이스가 게임에서 왜 중요한가요?
────────────────────────────────────────────
게임 개발에서는 다양한 오브젝트가 '공통된 행동'을 하지만, 각각의 구현은 달라야 할 때가 많습니다.
예: 적, 보스, NPC 모두 대화할 수 있지만 행동 방식은 다름

➡ 이럴 때 인터페이스를 쓰면 "공통된 명세"는 유지하면서 "다양한 구현"이 가능합니다!

────────────────────────────────────────────
✅ 예제: IInteractable 인터페이스로 상호작용 구현하기
────────────────────────────────────────────

using System;

namespace GameInterfaceExample
{
    // 1. 인터페이스 선언: 모든 상호작용 가능한 오브젝트가 구현해야 함
    interface IInteractable
    {
        void Interact();
    }

    // 2. NPC 클래스
    class NPC : IInteractable
    {
        public void Interact()
        {
            Console.WriteLine("NPC: 안녕하세요, 여행자님!");
        }
    }

    // 3. 상자 클래스
    class Chest : IInteractable
    {
        public void Interact()
        {
            Console.WriteLine("상자: 당신은 상자를 열었습니다. 아이템 획득!");
        }
    }

    // 4. 문 클래스
    class Door : IInteractable
    {
        public void Interact()
        {
            Console.WriteLine("문: 문이 열렸습니다.");
        }
    }

    // 5. 플레이어가 오브젝트와 상호작용하는 클래스
    class Player
    {
        public void InteractWithObject(IInteractable obj)
        {
            obj.Interact();
        }
    }

    // 6. 실행 예시
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player();

            IInteractable npc = new NPC();
            IInteractable chest = new Chest();
            IInteractable door = new Door();

            player.InteractWithObject(npc);
            player.InteractWithObject(chest);
            player.InteractWithObject(door);
        }
    }
}

────────────────────────────────────────────
✅ 실행 결과
────────────────────────────────────────────
NPC: 안녕하세요, 여행자님!
상자: 당신은 상자를 열었습니다. 아이템 획득!
문: 문이 열렸습니다.

────────────────────────────────────────────
✅ 인터페이스 사용의 장점 요약 (게임 관점)
────────────────────────────────────────────
1. 유연한 오브젝트 설계
   → 다양한 오브젝트가 공통 동작을 구현할 수 있음 (예: 상호작용, 공격 등)

2. 확장성 ↑
   → 새로운 IInteractable 구현체를 추가해도 기존 코드는 변경 불필요

3. 다형성 지원
   → NPC, 문, 상자를 같은 방식으로 처리 가능

4. 테스트와 유지보수 쉬움
   → MockInteractable 등으로 테스트 가능

────────────────────────────────────────────
이 예제를 통해 게임에서 인터페이스가 얼마나 강력하고 유용한지 알 수 있습니다.
현실의 Unity 프로젝트에서도 IInteractable, IDamageable 등 많이 쓰이니 꼭 익혀두세요! 🚀
