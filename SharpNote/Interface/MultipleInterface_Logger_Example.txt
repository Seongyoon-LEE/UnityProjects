
📘 C# 인터페이스 예제 - 다중 인터페이스 구현 + 기본 구현 메서드

────────────────────────────────────────────
✅ 예제 주제
────────────────────────────────────────────
- 인터페이스를 **여러 개 구현**한 클래스 예제 (FlyIngCar)
- 인터페이스의 **기본 구현(Default Implementation)**을 사용하는 예제 (ILogger)
- ConsoleLogger 클래스가 이 기본 구현을 오버라이드하는 상황까지 함께 다룸

────────────────────────────────────────────
✅ 예제 구조 정리
────────────────────────────────────────────

1. 인터페이스 IRunnable: Run() 메서드 요구
2. 인터페이스 IFlyable: Fly() 메서드 요구
3. 클래스 FlyIngCar: 위 두 인터페이스 모두 구현
   → 즉, "날 수 있는 자동차"
4. 인터페이스 ILogger: WriteLog(string), WriteError(string)
   - WriteError는 기본 구현을 가짐 (C# 8.0 이상 지원)
   - 기본 구현: WriteLog를 활용해 "Error: ..." 메시지 출력
5. ConsoleLogger 클래스: ILogger 구현체
   - WriteLog 구현
   - WriteError도 명시적으로 재정의함 (오버라이딩)

────────────────────────────────────────────
✅ FlyIngCar 예제 코드
────────────────────────────────────────────

```csharp
interface IRunnable
{
    void Run();
}

interface IFlyable
{
    void Fly();
}

class FlyIngCar : IRunnable, IFlyable
{
    public void Run()
    {
        Console.WriteLine("The flying car is running on the road.");
    }

    public void Fly()
    {
        Console.WriteLine("The flying car is flying in the sky");
    }
}
```

> ✔️ IRunnable + IFlyable을 모두 구현하여 육상 + 공중 이동 모두 가능

```csharp
FlyIngCar car = new FlyIngCar();
car.Run(); // 직접 호출
car.Fly();

IRunnable runnable = car as IRunnable;
runnable?.Run(); // 인터페이스 형변환 후 호출

IFlyable flyable = car as IFlyable;
flyable?.Fly();
```

────────────────────────────────────────────
✅ 인터페이스 기본 구현 & 오버라이드 예제
────────────────────────────────────────────

```csharp
interface ILogger
{
    void WriteLog(string message);

    void WriteError(string message)
    {
        WriteLog($"Error: {message}");
    }
}
```

> ✔️ C# 8.0부터 인터페이스에 "기본 구현" 가능!

```csharp
public class ConsoleLogger : ILogger
{
    public void WriteLog(string message)
    {
        Console.WriteLine($"{DateTime.Now.ToLocalTime()} {message}");
    }

    // WriteError를 명시적으로 재정의
    public void WriteError(string message)
    {
        Console.WriteLine($"{DateTime.Now.ToLocalTime()} Error: {message}");
    }
}
```

────────────────────────────────────────────
✅ 사용 예 및 결과
────────────────────────────────────────────

```csharp
ILogger logger = new ConsoleLogger();
logger.WriteLog("System UP");
logger.WriteError("System Failed");

ConsoleLogger cLogger = new ConsoleLogger();
cLogger.WriteLog("System UP");
cLogger.WriteError("System Failed");
```

> 🔎 인터페이스의 기본 구현은 구현체 클래스에서 **오버라이딩 하지 않으면 기본 로직이 실행됨**

────────────────────────────────────────────
✅ 피드백 및 보충 설명
────────────────────────────────────────────

1. ConsoleLogger가 WriteError를 "명시적으로 구현"했기 때문에 인터페이스 기본 구현은 무시됨
2. 만약 구현하지 않으면 인터페이스의 기본 구현이 실행됨
3. 다중 인터페이스 구현 시, 모든 메서드를 명확히 구분해서 구현할 것
4. as 키워드와 null 체크를 활용한 안전한 인터페이스 변환 👍

────────────────────────────────────────────
✅ 정리 포인트
────────────────────────────────────────────

- 인터페이스는 "구현 계약"이며, 다중 구현을 통해 복합 기능 클래스 생성 가능
- C# 8.0 이상에서는 인터페이스에도 기본 구현을 제공할 수 있어 재사용성이 높아짐
- 인터페이스를 통해 유연하고 확장 가능한 코드를 만들 수 있으며,
  테스트와 유지보수에도 유리한 구조를 제공함

────────────────────────────────────────────
이 예제는 "다중 인터페이스 구현 + 인터페이스 기본 구현"이라는 두 가지 주제를 모두 담은 중요한 예시입니다. 꼭 익혀두세요! 😎
