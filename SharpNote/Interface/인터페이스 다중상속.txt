
📘 C# 인터페이스 응용 예제 - 인터페이스 상속과 다형성 (IFormattableLogger)

────────────────────────────────────────────
✅ 주제: 인터페이스 상속 + 가변 인자(params) 활용 예제
────────────────────────────────────────────

이번 예제에서는 기존 ILogger를 확장한 IFormattableLogger 인터페이스와
이를 구현한 ConsoleLogger2 클래스를 통해 포맷 로그를 출력하는 구조를 학습합니다.

────────────────────────────────────────────
✅ 전체 구조 설명
────────────────────────────────────────────

1. ILogger 인터페이스
   - 기본 로그 출력 기능을 정의
   - 메서드: void WriteLog(string message);

2. IFormattableLogger 인터페이스
   - ILogger를 상속받음 (즉, ILogger의 모든 기능 포함)
   - 추가 메서드: void WriteLog(string message, params Object[] args);
   - "가변 인자"를 받아 포맷된 문자열을 출력할 수 있음

3. ConsoleLogger2 클래스
   - IFormattableLogger 구현체
   - 두 가지 WriteLog 모두 구현 (인터페이스에서 요구)

4. MainApp 클래스 (테스트용)
   - IFormattableLogger 타입 변수에 ConsoleLogger2 할당
   - 다양한 방식으로 로그 출력 테스트

────────────────────────────────────────────
✅ 예제 코드 (정리된 형태)
────────────────────────────────────────────

using System;

namespace LoggerExample
{
    interface ILogger
    {
        void WriteLog(string message);
    }

    interface IFormattableLogger : ILogger
    {
        void WriteLog(string message, params object[] args);
    }

    class ConsoleLogger2 : IFormattableLogger
    {
        public void WriteLog(string message)
        {
            Console.WriteLine($"{DateTime.Now.ToLocalTime()} {message}");
        }

        public void WriteLog(string format, params object[] args)
        {
            string message = string.Format(format, args);
            Console.WriteLine($"{DateTime.Now.ToLocalTime()} {message}");
        }
    }

    internal class MainApp
    {
        static void Main(string[] args)
        {
            IFormattableLogger logger = new ConsoleLogger2();
            logger.WriteLog("The world is not flat");
            logger.WriteLog("{0} + {1} = {2}", 1, 1, 2);
        }
    }
}

────────────────────────────────────────────
✅ 출력 예시
────────────────────────────────────────────
2025-06-02 오전 10:00:00 The world is not flat
2025-06-02 오전 10:00:00 1 + 1 = 2

────────────────────────────────────────────
✅ 학습 포인트 정리
────────────────────────────────────────────

1. 인터페이스 상속
   - IFormattableLogger는 ILogger를 "상속"함으로써, 기존 기능 + 새로운 기능 제공

2. 다형성 (Polymorphism)
   - IFormattableLogger logger = new ConsoleLogger2();
   - 인터페이스 타입으로 구현체를 가리키는 전형적인 다형성 구조

3. 가변 인자 (params)
   - 다양한 개수의 인자를 받아 포맷팅 가능 → string.Format(format, args);

4. 유지보수성과 확장성
   - 인터페이스 기반 설계 덕분에 새로운 포맷 로거, 파일 로거 등 쉽게 추가 가능

────────────────────────────────────────────
✅ 게임 개발 응용 예시
────────────────────────────────────────────

예를 들어 게임에서 '전투 로그'를 출력할 때도 유용하게 활용 가능:

logger.WriteLog("{0}이(가) {1}에게 {2}의 피해를 입힘", "Player", "Goblin", 10);
// 출력: Player이(가) Goblin에게 10의 피해를 입힘

→ 다양한 이벤트 로그를 깔끔하게 출력할 수 있음!

────────────────────────────────────────────
이 예제는 인터페이스 상속, 다형성, 가변 인자 등 C# 인터페이스 활용의 고급 예시입니다. 😊
