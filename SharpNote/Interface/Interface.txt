
📘 C# 인터페이스 예제 정리 - ILogger 기반 로그 시스템

────────────────────────────────────────────
✅ 1. 인터페이스란?
────────────────────────────────────────────
- 인터페이스(interface)는 클래스가 구현해야 할 '기능의 설계도' 역할을 합니다.
- 메서드, 속성, 이벤트 등을 정의하고 실제 구현은 클래스에서 수행합니다.
- 인터페이스를 사용하면 "기능의 표준화", "느슨한 결합"이 가능해집니다.

────────────────────────────────────────────
✅ 2. 전체 구조
────────────────────────────────────────────
1) 인터페이스: ILogger
   - 기능: WriteLog(string message)
2) 구현 클래스:
   - ConsoleLogger: 콘솔에 출력
   - FileLogger: 파일에 로그 저장
3) 소비 클래스:
   - ClimateMonitor: ILogger에만 의존하여 로그 기록
4) 실행:
   - Main 함수에서 FileLogger 또는 ConsoleLogger 주입

────────────────────────────────────────────
✅ 3. 예제 코드 (정상 작동 & 개선된 코드)
────────────────────────────────────────────

using System;
using System.IO;

namespace LoggerExample
{
    // 1. 인터페이스 선언
    interface ILogger
    {
        void WriteLog(string message);
    }

    // 2. 콘솔 로그 구현체
    class ConsoleLogger : ILogger
    {
        public void WriteLog(string message)
        {
            Console.WriteLine($"{DateTime.Now.ToLocalTime()} {message}");
        }
    }

    // 3. 파일 로그 구현체
    class FileLogger : ILogger, IDisposable
    {
        private StreamWriter writer;
        public FileLogger(string path)
        {
            writer = File.CreateText(path);
            writer.AutoFlush = true;
        }

        public void WriteLog(string message)
        {
            writer.WriteLine($"[File] {DateTime.Now.ToShortTimeString()} {message}");
        }

        public void Dispose()
        {
            writer?.Close();
            writer?.Dispose();
        }
    }

    // 4. 소비 클래스
    class ClimateMonitor
    {
        private ILogger logger;
        public ClimateMonitor(ILogger logger)
        {
            this.logger = logger;
        }

        public void Start()
        {
            while (true)
            {
                Console.Write("온도를 입력해주세요 (종료: 엔터): ");
                string? input = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(input)) break;
                logger.WriteLog($"현재 온도: {input}");
            }
        }
    }

    // 5. Main 함수
    internal class Program
    {
        static void Main(string[] args)
        {
            // FileLogger 사용 예시
            using (ILogger logger = new FileLogger("MyLog.txt"))
            {
                ClimateMonitor monitor = new ClimateMonitor(logger);
                monitor.Start();
            }

            // ConsoleLogger 사용 예시
            /*
            ILogger logger = new ConsoleLogger();
            ClimateMonitor monitor = new ClimateMonitor(logger);
            monitor.Start();
            */
        }
    }
}

────────────────────────────────────────────
✅ 4. 핵심 포인트 요약
────────────────────────────────────────────
- 인터페이스: 사용 규칙을 정의할 뿐, 구현은 하지 않음.
- 구현 클래스: 실제 동작을 정의 (ConsoleLogger, FileLogger)
- 소비 클래스: 인터페이스만 알고 구현체는 모름 (=> 유연한 설계)
- 장점: 기능 변경, 테스트, 유지보수에 유리한 구조 (의존성 주입)

────────────────────────────────────────────
✅ 5. 추천 확장
────────────────────────────────────────────
- `ILogger`에 로그 레벨 추가 (Info, Warning, Error)
- 로그 포맷 옵션화
- `LoggerFactory`로 동적 인스턴스 생성
- 유닛 테스트 시 `MockLogger` 도입

────────────────────────────────────────────
이 문서 하나로 인터페이스의 개념부터 응용까지 한 번에 정리되었습니다. 🚀
