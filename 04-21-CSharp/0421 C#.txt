Svm + tab + tab =   static void Main(string[] args) {}
static = 정적 할당
void = 비어있다
namespace = 여러 클래스를 담을수 있다.
normalization = 정규화
-=, +=, *=, /=, %= 복합연산자
decimal = 뒤에 m을 붙힘 소숫점 아래 30자리 이상

1.컴파일러
-우리가 공부하는 C# 뿐만아니라 C, C++, JAVA 등 많은 프로그래밍 언어들은 각각의 컴파일러가 존재 합니다.
각 컴파일러에 의해 exe, dll 파일 등과 같이 만들어진 출력 파일을 어셈블리(Assembly)_라고 부르는데 이것을 
컴퓨터는 다시 자신이 알수있는 원시 코드로 컴파일하여 우리가 만든 프로그램이 실행되게 만듭니다.

[C# 코드] -> [C# 컴파일]->[빌드]->[exe, dll 실행]->[원시 코드 컴파일]->[프로그램 시작]

2.디버깅
-일반적으로 게임을 하다보면 의도치 않은 종료나 비정상적인 결과가 나왔을때 유저들은 버그라고 부릅니다.
이런 논리적 오류나 잠재적인 오류를 가리켜 통칭 버그(Bug)라 부르는데 이를 근본적인 원인을 찾아내 
해결할수 있는 작업을 디버깅이라 할수 있습니다.

디버깅을 하기 위해서는 F5를 누르면 바로 디버깅이 시작되는데 결과창을 확인 하기도전에 콘솔창이 닫히게
되는데 이는 코딩을 잘못해서가 아니라 컴퓨터가 더이상 행할수 있는 코드가 없어서 자동 종료된 것입니다.
우리가 사용하였던 Ctrl+F5는 디버깅을 하지 않고 실행을 누른것과 마찬가지로 동작하게 됩니다.
이제 우리가 작성한 코드를 보도록 하겠습니다.

using System;은 얼핏 보면 하나 같지만 세 가지 요소로 이루어져 있습니다.
[키워드] + [네임스페이스] + [문장의 끝을 알리는 기호]
쉽게 말해 "System이라는 네임스페이스를 가져다 쓰겠다."라고 컴파일러에게 알리는 알리는 역활을 합니다.

3.네임스페이스란 성격이 비슷한 클래스(Class), 구조체(Struct), 인터페이스(Interface) 등을 그룹화 한것을 말합니다.
여기서 클래스는 정적인 것과 동적인 기능으로 나뉘는데 정적인것은 필드(Field) 동적적인것은 메소드(Method)로
표현됩니다. 이는 프로그램을 구성하는 기본 단위이고 하나의 클래스는 여러 개의 객체(Object)를 만들어 낼수 있습니다.
앞서 작성한 코드에서 보면 System 네임스페이스로 부터 Console 이라는 메소드를 가져다 사용 하였습니다.
실제 코드에서 using System; 이라는 문장을 삭제하고 빌드를 하면 실패와 오류 메세지를 출력합니다.

4.메인
static void Main 메소드는 프로그램의 최초 진입점을 나타내며 반드시 있어야 하는 메소드입니다.
프로그램이 시작되면 메인 메소드를 통해 차례차례 동작을하고 마지막에 도달하면 더이상 실행할 코드가 없으므로 
프로그램 또한 종료 됩니다. static은 한정자로 정적인 메소드를 의미하고 void는 반환 형식으로 반환 값이 없다는
것을 의미합니다.